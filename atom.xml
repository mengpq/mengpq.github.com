<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mengpq's Blog]]></title>
  <link href="http://mengpq.github.io/atom.xml" rel="self"/>
  <link href="http://mengpq.github.io/"/>
  <updated>2013-04-26T02:06:06+08:00</updated>
  <id>http://mengpq.github.io/</id>
  <author>
    <name><![CDATA[mengpq]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[webpy学习笔记]]></title>
    <link href="http://mengpq.github.io/blog/2013/04/26/webpyxue-xi-bi-ji/"/>
    <updated>2013-04-26T00:30:00+08:00</updated>
    <id>http://mengpq.github.io/blog/2013/04/26/webpyxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<ul>
<li>建立一个简单的网页

<ul>
<li>在当前目录下建立一个main.py，作为整个web服务的启动程序，里面主要是做一些初始化工作。写完main.py之后，直接python main.py会启动一个以8080为端口的web服务，如果想用其他端口，运行时添加一个port的端口值：python main.py port</li>
<li>main.py中首先要建一个urls表，这个表用正则表达式来匹配url，然后作出相应的动作，然后<strong>web.application(urls,globals()).run()</strong>启动web服务

<ul>
<li>urls = (&#8216;/&#8217;, &#8216;index&#8217;) 这个表示处理用index这个类来处理&#8217;URL/&#8217;这样的url</li>
<li>urls = (&#8216;/test/<em>&#8217;, &#8216;test&#8217;) 这个表示对于&#8217;URL/test/.</em>&#8216;这样的url，用test这个类去处理，那个.*是正则表达式匹配</li>
</ul>
</li>
<li>GET

<ul>
<li>在写一个响应的类时，如果网页有GET请求，那么就在那个类中定义一个GET函数，返回一个HTML页面或者一些信息</li>
</ul>
</li>
<li>POST

<ul>
<li>可以用POST提交表单给其他函数处理</li>
</ul>
</li>
<li>模板

<ul>
<li>在./下建立一个templates的目录，然后在目录下建立.html或者.xml的文件，然后把render绑定templates目录

<ul>
<li>render = web.template.render(&#8216;templates/&#8217;)</li>
</ul>
</li>
<li>在html中的第一行用$def with (var) 声明接收var变量，然后我们就可以在html中使用$var来获取和改变变量的值。因为web.py会转移任何用到的变量，所以如果当$var的值为一段HTML代码时，这一段代码将被转义显示为纯文本，为了避免这个问题，可以这样<strong>$:var</strong>使用$var的值。
)</li>
</ul>
</li>
<li>一个简单的hello程序</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>main.py </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>           <span class="kn">import</span> <span class="nn">web</span>
</span><span class='line'>          <span class="n">urls</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="s">&#39;hello&#39;</span><span class="p">)</span> <span class="c">#识别URL/，然后交给hello这个类处理，其他无法识别的URL将提示no found</span>
</span><span class='line'>          <span class="n">app</span> <span class="o">=</span> <span class="n">web</span><span class="o">.</span><span class="n">application</span><span class="p">(</span><span class="n">urls</span><span class="p">,</span> <span class="nb">globals</span><span class="p">())</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">class</span> <span class="nc">hello</span><span class="p">:</span>
</span><span class='line'>              <span class="k">def</span> <span class="nf">GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>                  <span class="k">return</span> <span class="s">&#39;hello,world!&#39;</span>
</span><span class='line'>              
</span><span class='line'>          <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>              <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li><ul>
<li>python main.py ，然后访问localhost:8080就可以看到hello,world!了</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use octopress]]></title>
    <link href="http://mengpq.github.io/blog/2013/04/26/use-octopress/"/>
    <updated>2013-04-26T00:02:00+08:00</updated>
    <id>http://mengpq.github.io/blog/2013/04/26/use-octopress</id>
    <content type="html"><![CDATA[<ul>
<li>发表文章的流程

<ul>
<li>rake new_post[&#8220;title&#8221;]</li>
<li>修改 source/_post下对应的文章，支持markdown语法</li>
<li>rake preview 默认的端口是4000，在本机预览修改</li>
<li>rake generate 生成静态页面</li>
<li>rake deploy 上传到github.com进行更新</li>
<li>由于本机的rake版本和默认的那个版本不一样，所以不能直接用，然后根据提示，要在rake之前加bundle exec</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Splay Tree]]></title>
    <link href="http://mengpq.github.io/blog/2013/04/17/hello-world/"/>
    <updated>2013-04-17T03:34:00+08:00</updated>
    <id>http://mengpq.github.io/blog/2013/04/17/hello-world</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>SplayTree</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define REP(i,st,ed) for (int i=st; i&lt;ed; i++)</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">MAXN</span> <span class="o">=</span> <span class="mi">102400</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">splayNode</span><span class="p">{</span>
</span><span class='line'>    <span class="n">splayNode</span> <span class="o">*</span><span class="n">fa</span><span class="p">,</span><span class="o">*</span><span class="n">ch</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">rev</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">add</span><span class="p">;</span>
</span><span class='line'>    <span class="n">splayNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">=</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">key</span><span class="o">=</span><span class="n">key</span><span class="p">;</span>
</span><span class='line'>        <span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">add</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">rev</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="n">fa</span><span class="o">=</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">clear</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="k">delete</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">update</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">?</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="nl">size:</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">?</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="nl">size:</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">down</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">add</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">key</span><span class="o">+=</span><span class="n">add</span><span class="p">,</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">add</span><span class="o">+=</span><span class="n">add</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">key</span><span class="o">+=</span><span class="n">add</span><span class="p">,</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">add</span><span class="o">+=</span><span class="n">add</span><span class="p">;</span>
</span><span class='line'>            <span class="n">add</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">rev</span><span class="p">){</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">rev</span><span class="o">^=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">rev</span><span class="o">^=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">rev</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">splayNode</span><span class="o">*</span> <span class="n">rightmost</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">down</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">return</span> <span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">rightmost</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span><span class="o">*</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">splayNode</span><span class="o">*</span> <span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">k1</span><span class="p">,</span><span class="n">k2</span><span class="p">,</span><span class="n">data</span><span class="p">[</span><span class="n">MAXN</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">ptr</span> <span class="n">build</span><span class="p">(</span><span class="kt">int</span> <span class="n">data</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="n">ptr</span> <span class="n">fa</span><span class="o">=</span><span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mid</span><span class="o">=</span><span class="p">(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ptr</span> <span class="n">node</span><span class="o">=</span><span class="k">new</span> <span class="n">splayNode</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">mid</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">=</span><span class="n">fa</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">mid</span><span class="p">)</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">build</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mid</span><span class="o">&lt;</span><span class="n">r</span><span class="p">)</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">build</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">rotate</span><span class="p">(</span><span class="n">ptr</span> <span class="n">x</span><span class="p">){</span>
</span><span class='line'>    <span class="n">ptr</span> <span class="n">y</span><span class="o">=</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">fa</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">=</span><span class="n">y</span><span class="o">-&gt;</span><span class="n">fa</span><span class="p">)</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="n">y</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">o</span><span class="o">=</span><span class="n">y</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">y</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="o">!</span><span class="n">o</span><span class="p">]</span><span class="o">=</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="n">o</span><span class="p">])</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="n">o</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">=</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="n">o</span><span class="p">]</span><span class="o">=</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">y</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">=</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">y</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">();</span>
</span><span class='line'>    <span class="n">x</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">splay</span><span class="p">(</span><span class="n">ptr</span> <span class="n">x</span><span class="p">,</span> <span class="n">ptr</span> <span class="n">fa</span><span class="p">){</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">!=</span><span class="n">fa</span><span class="p">){</span>
</span><span class='line'>        <span class="cm">/* this condition are need sometime</span>
</span><span class='line'><span class="cm">         * if (x-&gt;fa-&gt;fa) x-&gt;fa-&gt;fa-&gt;down();</span>
</span><span class='line'><span class="cm">         * if (x-&gt;fa) x-&gt;fa-&gt;down();</span>
</span><span class='line'><span class="cm">         * x-&gt;down();</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">==</span><span class="n">fa</span><span class="p">)</span> <span class="n">rotate</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">o1</span><span class="o">=</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="n">x</span><span class="p">,</span><span class="n">o2</span><span class="o">=</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">fa</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">o1</span><span class="o">==</span><span class="n">o2</span><span class="p">)</span> <span class="n">rotate</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">fa</span><span class="p">),</span><span class="n">rotate</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="k">else</span> <span class="n">rotate</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">rotate</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ptr</span> <span class="n">select</span><span class="p">(</span><span class="n">ptr</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">){</span>
</span><span class='line'>    <span class="n">x</span><span class="o">-&gt;</span><span class="n">down</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]){</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">size</span><span class="o">&gt;=</span><span class="n">k</span><span class="p">)</span> <span class="k">return</span> <span class="n">select</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>        <span class="n">k</span><span class="o">-=</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">k</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">select</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ptr</span> <span class="n">join</span><span class="p">(</span><span class="n">ptr</span> <span class="n">x</span><span class="p">,</span> <span class="n">ptr</span> <span class="n">y</span><span class="p">){</span>
</span><span class='line'>    <span class="n">ptr</span> <span class="n">temp</span><span class="o">=</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">rightmost</span><span class="p">();</span>
</span><span class='line'>    <span class="n">splay</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">y</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">=</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">del</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">){</span>
</span><span class='line'>    <span class="n">root</span><span class="o">=</span><span class="n">select</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>    <span class="n">splay</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">=</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">root</span><span class="o">=</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">){</span>
</span><span class='line'>    <span class="n">root</span><span class="o">=</span><span class="n">select</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">splay</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">=</span><span class="n">select</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>    <span class="n">splay</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="n">splayNode</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">fa</span><span class="o">=</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">();</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">init</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">root</span><span class="o">=</span><span class="n">build</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">solve</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">st</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
</span><span class='line'>    <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">m</span><span class="p">){</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="n">st</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;a&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">number</span><span class="p">);</span>
</span><span class='line'>            <span class="n">root</span><span class="o">=</span><span class="n">select</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">splay</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>            <span class="n">temp</span><span class="o">=</span><span class="n">select</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">k2</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>            <span class="n">splay</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>            <span class="n">temp</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">key</span><span class="o">+=</span><span class="n">number</span><span class="p">;</span>
</span><span class='line'>            <span class="n">temp</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">add</span><span class="o">+=</span><span class="n">number</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;r&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="n">root</span><span class="o">=</span><span class="n">select</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">splay</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>            <span class="n">temp</span><span class="o">=</span><span class="n">select</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">k1</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>            <span class="n">splay</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">rev</span><span class="o">^=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;i&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">number</span><span class="p">);</span>
</span><span class='line'>            <span class="n">insert</span><span class="p">(</span><span class="n">number</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;d&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="n">del</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;m&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">number</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">number</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                <span class="n">temp</span><span class="o">=</span><span class="n">select</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">key</span><span class="o">=</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">;</span>
</span><span class='line'>                <span class="n">del</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="n">insert</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="n">temp</span><span class="o">=</span><span class="n">select</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">key</span><span class="o">=</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">;</span>
</span><span class='line'>                <span class="n">del</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                <span class="n">insert</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;q&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="n">root</span><span class="o">=</span><span class="n">select</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>            <span class="n">splay</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ca</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">,</span><span class="o">&amp;</span><span class="n">m</span><span class="p">,</span><span class="o">&amp;</span><span class="n">k1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">k2</span><span class="p">)){</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">m</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">k1</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">k2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="o">++</span><span class="n">ca</span><span class="p">);</span>
</span><span class='line'>        <span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">solve</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
